{"version":3,"file":"js/index.js?v=6d79c5038f6da26a6da0","mappings":"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","sources":["webpack://ts-basic/./src/application/core/datas/todoRepo.ts","webpack://ts-basic/./src/application/core/entities/todoItem.ts","webpack://ts-basic/./src/application/utilities/zLog.ts","webpack://ts-basic/./src/application/views/todo/todoView.ts","webpack://ts-basic/./src/application/views/todo/todoViewController.ts","webpack://ts-basic/./src/application/views/todoCompleted/todoCompletedView.ts","webpack://ts-basic/./src/application/views/todoCompleted/todoCompletedViewController.ts","webpack://ts-basic/./src/index.ts"],"sourcesContent":["import { ZTodo } from \"application/core/entities/todoItem\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodoRepo {\n  private _todoList: ZTodo[] = [];\n  public get todoList(): ZTodo[] {\n    return this._todoList;\n  }\n\n  constructor() {}\n\n  _addTodo(title: string, description?: string): ZTodo {\n    FUNC_LOG();\n\n    const todo = new ZTodo(title, description);\n    this.todoList.unshift(todo);\n\n    //add new todo for data hahahaha\n    return todo;\n  }\n\n  _buildDummyData() {\n    FUNC_LOG();\n\n    for (let i = 0; i < 10; i++) {\n      let todo = new ZTodo(\"Task \" + i, \"Desc Task \" + i);\n      this.todoList.push(todo);\n    }\n  }\n  _buildDummyDataCompleted() {\n    FUNC_LOG();\n\n    for (let i = 20; i < 30; i++) {\n      let todo = new ZTodo(\"Task \" + i, \"Desc Task \" + i);\n      todo._markAsCompleted();\n      this.todoList.push(todo);\n    }\n  }\n\n  _printTodo() {\n    FUNC_LOG();\n    for (let index = 0; index < this.todoList.length; index++) {\n      const element = this.todoList[index];\n      console.log(element._toString());\n    }\n  }\n\n  _deleteTodo(todo: ZTodo) {\n    const idx = this.todoList.indexOf(todo);\n    if (idx !== -1) {\n      this.todoList.splice(idx, 1);\n    }\n  }\n}\n","import { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodo {\n  _id: string;\n  _title: string;\n  _description: string;\n  _completed: boolean;\n  _createdAt: Date;\n  _updatedAt: Date;\n\n  static globalID = 0;\n\n  constructor(title: string, description?: string) {\n    this._id = this._generateId();\n    this._title = title;\n    this._description = description || \"\";\n    this._completed = false;\n    this._createdAt = new Date();\n    this._updatedAt = new Date();\n  }\n\n  _generateId(): string {\n    FUNC_LOG();\n\n    // Generate a unique identifier for each Todo instance\n    let val = ZTodo.globalID;\n    ZTodo.globalID++;\n    return val.toString();\n  }\n\n  _markAsCompleted(): void {\n    this._completed = true;\n    this._updatedAt = new Date();\n  }\n\n  /**\n   * get text from todo\n   * @returns description of a todo\n   */\n  _toString(): string {\n    return `TODO #${this._id}\\t${this._title}\\t${this._description}\\t${this._updatedAt}\\t${this._completed}`;\n  }\n}\n","\n// import chalk from \"chalk\";\nfunction getName(d:number) : string{\n\tconst error = new Error();\n\tif (error.stack == null) {\n\t  return \"\";\n\t}\n  \n\t// const firefoxMatch = (error.stack.split('\\n')[0 + d].match(/^.*(?=@)/) || [])[0];\n\t// const chromeMatch = ((((error.stack.split('at ') || [])[1 + d] || '').match(/(^|\\.| <| )(.*[^(<])( \\()/) || [])[2] || '').split('.').pop();\n\t// const safariMatch = error.stack.split('\\n')[0 + d];\n  \n\tconst firefoxMatch = error.stack.split('\\n')[0 + d];\n\tconst chromeMatch = error.stack.split('at ')[1 + d];\n\tconst safariMatch = error.stack.split('\\n')[0 + d];\n  \n\t// firefoxMatch ? console.log('firefoxMatch', firefoxMatch) : void 0;\n\t// chromeMatch ? console.log('chromeMatch', chromeMatch) : void 0;\n\t// safariMatch ? console.log('safariMatch', safariMatch) : void 0;\n\t\n\tlet res = firefoxMatch || chromeMatch || safariMatch;\n\n\tres = res.replace(\"at\", \"\");\n\tres = res.trim();\n\n\tconst idxOfPathent = res.indexOf(\"(\");\n\tif (idxOfPathent == -1) {\n\t\treturn \"\";\n\t}\n\treturn res.substring(0, idxOfPathent);\n  }\n\n  export function FUNC_LOG() {\n\tconsole.log(\"   %cENTER:\", \"color:white; background-color:purple;\", getName(3));\n  }","import { ZTodo } from \"application/core/entities/todoItem\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodoView {\n  private readonly table: JQuery<HTMLElement>;\n\n  private _delegate: ZTodoViewIF;\n\n  constructor(delegate: ZTodoViewIF) {\n    this._delegate = delegate;\n    this.table = $(\"#tblTodo\");\n    this.table.on(\"click\", \"tr\", function () {\n      const row = $(this);\n      console.log(\n        \"CLICKED ON ROW \" + row.attr(\"id\") + \"|\" + row.attr(\"todoID\")\n      );\n    });\n  }\n\n  /**\n   * Render all todo item to table\n   * @param todoList list of todo item to draw\n   */\n  _render(todoList: ZTodo[]) {\n    const body = this.table.children(\"tbody\");\n    body.empty();\n\n    todoList.forEach((todo) => {\n      const rowID = \"todo-\" + todo._id;\n      var newRow = $(\"<tr>\");\n      newRow.attr(\"id\", rowID);\n      newRow.attr(\"todoID\", todo._id);\n\n      newRow.append($(\"<td>\").text(todo._title));\n\n      // Add delete button\n      const btnDelete = $(\"<button>\")\n        .text(\"Delete\")\n        .on(\"click\", () => {\n          this._btnDelete_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnDelete));\n\n      // Add Complete button\n      const btnCompleted = $(\"<button>\")\n        .text(\"Completed\")\n        .on(\"click\", () => {\n          this._btnMarkAsCompleted_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnCompleted));\n\n      body.append(newRow);\n    });\n  }\n\n  // #region UI Event\n\n  /**\n   * Delete a todo item from reposite and update UI\n   * @param todo todo item to delete\n   */\n  private _btnDelete_Clicked(todo: ZTodo) {\n    FUNC_LOG();\n\n    this._delegate._requestDelete(todo);\n  }\n\n  private _btnMarkAsCompleted_Clicked(todo: ZTodo) {\n    FUNC_LOG();\n    this._delegate._requestMarkCompleted(todo);\n  }\n  // #endregion UI Event\n\n  // #region HELPER\n  /**\n   * remove row for a todo\n   * @param todo todo item to be removed\n   */\n  _deleteUIRowForTodo(todo: ZTodo) {\n    const rowID = \"#todo-\" + todo._id;\n    let row = this.table.find(\"tbody > \" + rowID);\n    if (row) {\n      row.remove();\n    }\n  }\n  // #endregion HELPER\n}\n\nexport interface ZTodoViewIF {\n  _requestDelete(todo: ZTodo): void;\n  _requestMarkCompleted(todo: ZTodo): void;\n}\n","import { ZTodoRepo } from \"application/core/datas/todoRepo\";\nimport { ZTodoView, ZTodoViewIF } from \"./todoView\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\nimport { ZTodo } from \"application/core/entities/todoItem\";\n\nexport class ZTodoViewController implements ZTodoViewIF {\n  _todoRepo = new ZTodoRepo();\n\n  _todoView = new ZTodoView(this);\n\n  constructor() {}\n\n  _viewDidLoaded() {\n    FUNC_LOG();\n\n    this._todoRepo._buildDummyData();\n\n    this._render();\n  }\n\n  private _render() {\n    this._todoView._render(this._todoRepo.todoList);\n  }\n\n  // #region TodoView CallBack\n  _requestDelete(todo: ZTodo): void {\n    console.log(`REQUEST DELETE ${todo._title}`);\n    this._todoRepo._deleteTodo(todo);\n    this._todoView._deleteUIRowForTodo(todo);\n  }\n  _requestMarkCompleted(todo: ZTodo): void {\n    console.log(`REQUEST MARK COMPLETED ${todo._title}`);\n    todo._markAsCompleted();\n    this._todoView._deleteUIRowForTodo(todo);\n  }\n  // #endregion TodoView CallBack\n}\n","import { ZTodo } from \"application/core/entities/todoItem\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodoCompletedView {\n  private readonly table: JQuery<HTMLElement>;\n  private _delegate: ZTodoCompletedViewIF;\n\n  constructor(delegate: ZTodoCompletedViewIF) {\n    this.table = $(\"#tblCompleted\");\n    this._delegate = delegate;\n  }\n\n  /**\n   * Render all todo item to table\n   * @param todoList list of todo item to draw\n   */\n  _render(todoList: ZTodo[]) {\n    const body = this.table.children(\"tbody\");\n    body.empty();\n\n    todoList.forEach((todo) => {\n      const rowID = \"todo-completed-\" + todo._id;\n      var newRow = $(\"<tr>\");\n      newRow.attr(\"id\", rowID);\n\n      newRow.append($(\"<td>\").text(todo._title));\n\n      // Add delete button\n      const btnDelete = $(\"<button>\")\n        .text(\"Delete\")\n        .on(\"click\", () => {\n          this._btnDelete_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnDelete));\n\n      // Add Complete button\n      const btnRemoveCompleted = $(\"<button>\")\n        .text(\"Un Completed\")\n        .on(\"click\", () => {\n          //   this.btnMarkAsCompleted_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnRemoveCompleted));\n\n      body.append(newRow);\n    });\n  }\n\n  // #region UI Event\n\n  /**\n   * Delete a todo item from reposite and update UI\n   * @param todo todo item to delete\n   */\n  private _btnDelete_Clicked(todo: ZTodo) {\n    FUNC_LOG();\n\n    this._delegate._requestDelete(todo);\n  }\n\n  // #endregion UI Event\n\n  // #region HELPER\n  /**\n   * remove row for a todo\n   * @param todo todo item to be removed\n   */\n  _deleteUIRowForTodo(todo: ZTodo) {\n    const rowID = \"#todo-completed-\" + todo._id;\n    let row = this.table.find(\"tbody > \" + rowID);\n    if (row) {\n      row.remove();\n    }\n  }\n\n  // #endregion HELPER\n} // END CLASS TodoCompletedView\n\nexport interface ZTodoCompletedViewIF {\n  _requestDelete(todo: ZTodo): void;\n  _requestRemoveCompleted(todo: ZTodo): void;\n}\n","import { ZTodoRepo } from \"application/core/datas/todoRepo\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\nimport { ZTodo } from \"application/core/entities/todoItem\";\nimport { ZTodoCompletedView, ZTodoCompletedViewIF } from \"./todoCompletedView\";\n\nexport class ZTodoCompletedViewController implements ZTodoCompletedViewIF {\n  _todoRepo = new ZTodoRepo();\n\n  _todoView = new ZTodoCompletedView(this);\n\n  constructor() {}\n\n  _viewDidLoaded() {\n    FUNC_LOG();\n\n    this._todoRepo._buildDummyDataCompleted();\n    this._render();\n  }\n\n  private _render() {\n    this._todoView._render(this._todoRepo.todoList);\n  }\n\n  // #region TodoView CallBack\n  _requestDelete(todo: ZTodo): void {\n    console.log(`REQUEST DELETE ${todo._title}`);\n    this._todoRepo._deleteTodo(todo);\n    this._todoView._deleteUIRowForTodo(todo);\n  }\n  _requestRemoveCompleted(todo: ZTodo): void {}\n  // #endregion TodoView CallBack\n}\n","import \"./styles/index.scss\";\n\nimport { FUNC_LOG } from \"application/utilities/zLog\";\nimport { ZTodoViewController } from \"application/views/todo/todoViewController\";\nimport { ZTodoCompletedViewController } from \"application/views/todoCompleted/todoCompletedViewController\";\n\nexport class Application {\n  static _app = new Application();\n\n  _todoVC = new ZTodoViewController();\n  _todoCompletedVC = new ZTodoCompletedViewController();\n\n  constructor() {}\n\n  //INIT APP\n  _initApp() {\n    FUNC_LOG();\n\n    this._initUIEvent();\n    this._todoVC._viewDidLoaded();\n    this._todoCompletedVC._viewDidLoaded();\n  }\n\n  private _initUIEvent() {\n    //use () => { due to scope of \"this\"\n    $(\"#btnTest\").on(\"click\", () => {\n      this._onBtnTest_Clicked();\n    });\n  }\n\n  //UI EVENT\n  private _onBtnTest_Clicked() {\n    console.log(\"BTN CLICKED\");\n\n    try {\n      // this.dummy222();\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(\"EXCEPTION !!! \" + error.message);\n      }\n    }\n  }\n\n  // dummy222() {\n  //   console.log(\"DUUUUDUDU\");\n  //   throw new Error(\"OMG\");\n  // }\n}\n$(document).ready(function () {\n  // jQuery methods go here...\n  console.log(\"****************APP BEGIN****************\");\n  console.log(\"****************VERSION: \" + _APP_VERSION_ + \"****************\");\n\n  Application._app._initApp();\n});\n"],"names":["todoList","this","_todoList","constructor","_addTodo","title","description","FUNC_LOG","todo","ZTodo","unshift","_buildDummyData","i","push","_buildDummyDataCompleted","_markAsCompleted","_printTodo","index","length","_deleteTodo","idx","indexOf","splice","_id","_generateId","_title","_description","_completed","_createdAt","Date","_updatedAt","val","globalID","toString","_toString","delegate","_delegate","table","$","on","_render","body","children","empty","forEach","rowID","newRow","attr","append","text","btnDelete","_btnDelete_Clicked","btnCompleted","_btnMarkAsCompleted_Clicked","_requestDelete","_requestMarkCompleted","_deleteUIRowForTodo","row","find","remove","_todoRepo","ZTodoRepo","_todoView","ZTodoView","_viewDidLoaded","btnRemoveCompleted","ZTodoCompletedView","_requestRemoveCompleted","Application","_todoVC","ZTodoViewController","_todoCompletedVC","ZTodoCompletedViewController","_initApp","_initUIEvent","_onBtnTest_Clicked","_app","document","ready"],"sourceRoot":""}