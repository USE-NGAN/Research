{"version":3,"file":"js/index.js?v=a92803daa77a4697670a","mappings":"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","sources":["webpack://ts-basic/./src/application/app.ts","webpack://ts-basic/./src/application/core/datas/todoRepo.ts","webpack://ts-basic/./src/application/core/entities/todoItem.ts","webpack://ts-basic/./src/application/core/midi/connection/midiManager.ts","webpack://ts-basic/./src/application/utilities/zLog.ts","webpack://ts-basic/./src/application/views/mainView/mainViewController.ts","webpack://ts-basic/./src/application/views/todo/todoView.ts","webpack://ts-basic/./src/application/views/todo/todoViewController.ts","webpack://ts-basic/./src/application/views/todoCompleted/todoCompletedView.ts","webpack://ts-basic/./src/application/views/todoCompleted/todoCompletedViewController.ts","webpack://ts-basic/./src/index.ts"],"sourcesContent":["import { ZMidiManager } from \"./core/midi/connection/midiManager\";\nimport { FUNC_LOG } from \"./utilities/zLog\";\nimport { ZMainViewController } from \"./views/mainView/mainViewController\";\nimport { ZTodoViewController } from \"./views/todo/todoViewController\";\nimport { ZTodoCompletedViewController } from \"./views/todoCompleted/todoCompletedViewController\";\n\nexport class Application {\n  static _app = new Application();\n  readonly mainView: ZMainViewController;\n\n  constructor() {\n    this.mainView = new ZMainViewController();\n  }\n\n  //INIT APP\n  _initApp() {\n    FUNC_LOG();\n\n    //perform init something\n\n    console.log(\"INIT APP DONE\");\n\n    this.mainView._viewDidLoaded();\n  }\n}\n","import { ZTodo } from \"application/core/entities/todoItem\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodoRepo {\n  _todoList: ZTodo[] = [];\n\n  constructor() {}\n\n  _addTodo(title: string, description?: string): ZTodo {\n    FUNC_LOG();\n\n    const todo = new ZTodo(title, description);\n    this._todoList.unshift(todo);\n\n    //add new todo for data hahahaha\n    return todo;\n  }\n\n  _buildDummyData() {\n    FUNC_LOG();\n\n    for (let i = 0; i < 10; i++) {\n      let todo = new ZTodo(\"Task \" + i, \"Desc Task \" + i);\n      this._todoList.push(todo);\n    }\n  }\n  _buildDummyDataCompleted() {\n    FUNC_LOG();\n\n    for (let i = 20; i < 30; i++) {\n      let todo = new ZTodo(\"Task \" + i, \"Desc Task \" + i);\n      todo._markAsCompleted();\n      this._todoList.push(todo);\n    }\n  }\n\n  _printTodo() {\n    FUNC_LOG();\n    for (let index = 0; index < this._todoList.length; index++) {\n      const element = this._todoList[index];\n      console.log(element._toString());\n    }\n  }\n\n  _deleteTodo(todo: ZTodo) {\n    const idx = this._todoList.indexOf(todo);\n    if (idx !== -1) {\n      this._todoList.splice(idx, 1);\n    }\n  }\n}\n","import { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodo {\n  _id: string;\n  _title: string;\n  _description: string;\n  _completed: boolean;\n  _createdAt: Date;\n  _updatedAt: Date;\n\n  static globalID = 0;\n\n  constructor(title: string, description?: string) {\n    this._id = this._generateId();\n    this._title = title;\n    this._description = description || \"\";\n    this._completed = false;\n    this._createdAt = new Date();\n    this._updatedAt = new Date();\n  }\n\n  _generateId(): string {\n    // FUNC_LOG();\n\n    // Generate a unique identifier for each Todo instance\n    let val = ZTodo.globalID;\n    ZTodo.globalID++;\n    return val.toString();\n  }\n\n  _markAsCompleted(): void {\n    this._completed = true;\n    this._updatedAt = new Date();\n  }\n\n  /**\n   * get text from todo\n   * @returns description of a todo\n   */\n  _toString(): string {\n    return `TODO #${this._id}\\t${this._title}\\t${this._description}\\t${this._updatedAt}\\t${this._completed}`;\n  }\n}\n","import { LOG } from \"application/utilities/zLog\";\nimport { EventDispatcher } from \"strongly-typed-events\";\n\nexport class ZMidiManager {\n  constructor(delegate: ZMidiManagerIF) {\n    this.delegate = delegate;\n  }\n\n  private readonly TAG = \"[MIDI] \";\n\n  private _connectionState = ZMidiManagerState.DISCONNECTED;\n  public get connectionState() {\n    return this._connectionState;\n  }\n\n  delegate: ZMidiManagerIF;\n\n  public async startMidi() {\n    LOG(this.TAG, \"start MIDI\");\n\n    // 1. PERMISSION?\n    const permission = await navigator.permissions.query({\n      name: \"midi\" as PermissionName,\n    });\n\n    if (permission.state === \"denied\") {\n      LOG(this.TAG, \"NO PERMISSION MIDI\");\n      return;\n    }\n\n    // 2. MIDI ACCESS\n    navigator.requestMIDIAccess().then((access) => {\n      LOG(this.TAG, \"MIDI ACCESS OK. NUM OF DEV=\" + access.inputs.size);\n\n      access.addEventListener(\"statechange\", (event) => {\n        this._onMidiPortChanged(event);\n      });\n    });\n  }\n\n  private _onMidiPortChanged(event: Event) {\n    if (\n      event instanceof MIDIConnectionEvent &&\n      event.target instanceof MIDIAccess &&\n      event.port instanceof MIDIInput //only care about midiinput\n    ) {\n      const midiInput = event.port;\n      LOG(this.TAG, `PORT INFO ` + this._midiPortToString(event.port));\n\n      if (midiInput.state === \"disconnected\") {\n        console.log(\"❌❌❌❌❌❌❌DISCONNECTED❌❌❌❌❌❌❌\");\n\n        this._connectionState = ZMidiManagerState.DISCONNECTED;\n      } else if (midiInput.state === \"connected\") {\n        console.log(\"✅✅✅✅✅✅✅CONNECTED✅✅✅✅✅✅✅\");\n\n        this._connectionState = ZMidiManagerState.CONNNECTED;\n      }\n\n      //notify UI\n      this.delegate.onConnectionChanged(this);\n    }\n  }\n\n  private startConnectToMidi(midiAccess: MIDIAccess) {}\n\n  private _midiPortToString(port: MIDIPort): string {\n    return `\\n MANUFACTURER: ${port.manufacturer}\\n NAME: ${port.name}\\n STATE: ${port.state}`;\n  }\n  //   readonly repairAsync = (waitTime: number) =>\n  //     new Promise((resolve) => {\n  //       console.log(\"REPAIR BEGIN INSIDE PROMISE \" + waitTime);\n\n  //       console.log(\"DONE REPAIR \" + waitTime);\n  //       setTimeout(() => {\n  //         resolve(\"修理しました\");\n  //       }, waitTime);\n  //     });\n\n  //   readonly paymentAsync = (waitTime: number) =>\n  //     new Promise((resolve) => {\n  //       console.log(\"PAYMENT BEGIN INSIDE PROMISE\");\n\n  //       setTimeout(() => {\n  //         resolve(\"送金しました\");\n  //       }, waitTime);\n  //     });\n}\n\nexport interface ZMidiManagerIF {\n  onConnectionChanged(midiManager: ZMidiManager): void;\n}\n\nexport enum ZMidiManagerState {\n  CONNNECTED,\n  DISCONNECTED,\n}\n","// import chalk from \"chalk\";\nfunction getName(d: number): string {\n  const error = new Error();\n  if (error.stack == null) {\n    return \"\";\n  }\n\n  // const firefoxMatch = (error.stack.split('\\n')[0 + d].match(/^.*(?=@)/) || [])[0];\n  // const chromeMatch = ((((error.stack.split('at ') || [])[1 + d] || '').match(/(^|\\.| <| )(.*[^(<])( \\()/) || [])[2] || '').split('.').pop();\n  // const safariMatch = error.stack.split('\\n')[0 + d];\n\n  const firefoxMatch = error.stack.split(\"\\n\")[0 + d];\n  const chromeMatch = error.stack.split(\"at \")[1 + d];\n  const safariMatch = error.stack.split(\"\\n\")[0 + d];\n\n  // firefoxMatch ? console.log('firefoxMatch', firefoxMatch) : void 0;\n  // chromeMatch ? console.log('chromeMatch', chromeMatch) : void 0;\n  // safariMatch ? console.log('safariMatch', safariMatch) : void 0;\n\n  let res = firefoxMatch || chromeMatch || safariMatch;\n\n  res = res.replace(\"at\", \"\");\n  res = res.trim();\n\n  const idxOfPathent = res.indexOf(\"(\");\n  if (idxOfPathent == -1) {\n    return \"\";\n  }\n  return res.substring(0, idxOfPathent);\n}\nexport function LOG(tag: string, message: string) {\n  console.log(`${tag}\\t${message}`);\n}\n\nexport function FUNC_LOG() {\n  console.log(\n    \"   %cENTER:\",\n    \"color:white; background-color:purple;\",\n    getName(3)\n  );\n}\n","import {\n  ZMidiManagerIF,\n  ZMidiManager,\n} from \"application/core/midi/connection/midiManager\";\n\nimport { ZTodoViewController } from \"../todo/todoViewController\";\nimport { ZTodoCompletedViewController } from \"../todoCompleted/todoCompletedViewController\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZMainViewController implements ZMidiManagerIF {\n  _todoVC = new ZTodoViewController();\n  _todoCompletedVC = new ZTodoCompletedViewController();\n\n  _midi: ZMidiManager;\n\n  constructor() {\n    this._midi = new ZMidiManager(this);\n  }\n\n  _viewDidLoaded() {\n    FUNC_LOG();\n\n    this._initUIEvent();\n    this._todoVC._viewDidLoaded();\n    this._todoCompletedVC._viewDidLoaded();\n\n    this._midi.startMidi();\n  }\n\n  onConnectionChanged(midiManager: ZMidiManager): void {\n    FUNC_LOG();\n  }\n\n  private _initUIEvent() {\n    //use () => { due to scope of \"this\"\n    $(\"#btnTest\").on(\"click\", () => {\n      this._onBtnTest_Clicked();\n    });\n  }\n\n  //UI EVENT\n  private _onBtnTest_Clicked() {\n    console.log(\"BTN CLICKED\");\n\n    try {\n      // this.dummy222();\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(\"EXCEPTION !!! \" + error.message);\n      }\n    }\n  }\n}\n","import { ZTodo } from \"application/core/entities/todoItem\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodoView {\n  private readonly _table: JQuery<HTMLElement>;\n\n  private _delegate: ZTodoViewIF;\n\n  constructor(delegate: ZTodoViewIF) {\n    this._delegate = delegate;\n    this._table = $(\"#tblTodo\");\n    this._table.on(\"click\", \"tr\", function () {\n      const row = $(this);\n      console.log(\n        \"CLICKED ON ROW \" + row.attr(\"id\") + \"|\" + row.attr(\"todoID\")\n      );\n    });\n  }\n\n  /**\n   * Render all todo item to table\n   * @param todoList list of todo item to draw\n   */\n  _render(todoList: ZTodo[]) {\n    const body = this._table.children(\"tbody\");\n    body.empty();\n\n    todoList.forEach((todo) => {\n      const rowID = \"todo-\" + todo._id;\n      var newRow = $(\"<tr>\");\n      newRow.attr(\"id\", rowID);\n      newRow.attr(\"todoID\", todo._id);\n\n      newRow.append($(\"<td>\").text(todo._title));\n\n      // Add delete button\n      const btnDelete = $(\"<button>\")\n        .text(\"Delete\")\n        .on(\"click\", () => {\n          this._btnDelete_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnDelete));\n\n      // Add Complete button\n      const btnCompleted = $(\"<button>\")\n        .text(\"Completed\")\n        .on(\"click\", () => {\n          this._btnMarkAsCompleted_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnCompleted));\n\n      body.append(newRow);\n    });\n  }\n\n  // #region UI Event\n\n  /**\n   * Delete a todo item from reposite and update UI\n   * @param todo todo item to delete\n   */\n  private _btnDelete_Clicked(todo: ZTodo) {\n    FUNC_LOG();\n\n    this._delegate._requestDelete(todo);\n  }\n\n  private _btnMarkAsCompleted_Clicked(todo: ZTodo) {\n    FUNC_LOG();\n    this._delegate._requestMarkCompleted(todo);\n  }\n  // #endregion UI Event\n\n  // #region HELPER\n  /**\n   * remove row for a todo\n   * @param todo todo item to be removed\n   */\n  _deleteUIRowForTodo(todo: ZTodo) {\n    const rowID = \"#todo-\" + todo._id;\n    let row = this._table.find(\"tbody > \" + rowID);\n    if (row) {\n      row.remove();\n    }\n  }\n  // #endregion HELPER\n}\n\nexport interface ZTodoViewIF {\n  _requestDelete(todo: ZTodo): void;\n  _requestMarkCompleted(todo: ZTodo): void;\n}\n","import { ZTodoRepo } from \"application/core/datas/todoRepo\";\nimport { ZTodoView, ZTodoViewIF } from \"./todoView\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\nimport { ZTodo } from \"application/core/entities/todoItem\";\n\nexport class ZTodoViewController implements ZTodoViewIF {\n  _todoRepo = new ZTodoRepo();\n\n  _todoView = new ZTodoView(this);\n\n  constructor() {}\n\n  _viewDidLoaded() {\n    FUNC_LOG();\n\n    this._todoRepo._buildDummyData();\n\n    this._render();\n  }\n\n  private _render() {\n    this._todoView._render(this._todoRepo._todoList);\n  }\n\n  // #region TodoView CallBack\n  _requestDelete(todo: ZTodo): void {\n    console.log(`REQUEST DELETE ${todo._title}`);\n    this._todoRepo._deleteTodo(todo);\n    this._todoView._deleteUIRowForTodo(todo);\n  }\n  _requestMarkCompleted(todo: ZTodo): void {\n    console.log(`REQUEST MARK COMPLETED ${todo._title}`);\n    todo._markAsCompleted();\n    this._todoView._deleteUIRowForTodo(todo);\n  }\n  // #endregion TodoView CallBack\n}\n","import { ZTodo } from \"application/core/entities/todoItem\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\n\nexport class ZTodoCompletedView {\n  private readonly _table: JQuery<HTMLElement>;\n  private _delegate: ZTodoCompletedViewIF;\n\n  constructor(delegate: ZTodoCompletedViewIF) {\n    this._table = $(\"#tblCompleted\");\n    this._delegate = delegate;\n  }\n\n  /**\n   * Render all todo item to table\n   * @param todoList list of todo item to draw\n   */\n  _render(todoList: ZTodo[]) {\n    const body = this._table.children(\"tbody\");\n    body.empty();\n\n    todoList.forEach((todo) => {\n      const rowID = \"todo-completed-\" + todo._id;\n      var newRow = $(\"<tr>\");\n      newRow.attr(\"id\", rowID);\n\n      newRow.append($(\"<td>\").text(todo._title));\n\n      // Add delete button\n      const btnDelete = $(\"<button>\")\n        .text(\"Delete\")\n        .on(\"click\", () => {\n          this._btnDelete_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnDelete));\n\n      // Add Complete button\n      const btnRemoveCompleted = $(\"<button>\")\n        .text(\"Un Completed\")\n        .on(\"click\", () => {\n          //   this.btnMarkAsCompleted_Clicked(todo);\n        });\n      newRow.append($(\"<td>\").append(btnRemoveCompleted));\n\n      body.append(newRow);\n    });\n  }\n\n  // #region UI Event\n\n  /**\n   * Delete a todo item from reposite and update UI\n   * @param todo todo item to delete\n   */\n  private _btnDelete_Clicked(todo: ZTodo) {\n    FUNC_LOG();\n\n    this._delegate._requestDelete(todo);\n  }\n\n  // #endregion UI Event\n\n  // #region HELPER\n  /**\n   * remove row for a todo\n   * @param todo todo item to be removed\n   */\n  _deleteUIRowForTodo(todo: ZTodo) {\n    const rowID = \"#todo-completed-\" + todo._id;\n    let row = this._table.find(\"tbody > \" + rowID);\n    if (row) {\n      row.remove();\n    }\n  }\n\n  // #endregion HELPER\n} // END CLASS TodoCompletedView\n\nexport interface ZTodoCompletedViewIF {\n  _requestDelete(todo: ZTodo): void;\n  _requestRemoveCompleted(todo: ZTodo): void;\n}\n","import { ZTodoRepo } from \"application/core/datas/todoRepo\";\nimport { FUNC_LOG } from \"application/utilities/zLog\";\nimport { ZTodo } from \"application/core/entities/todoItem\";\nimport { ZTodoCompletedView, ZTodoCompletedViewIF } from \"./todoCompletedView\";\n\nexport class ZTodoCompletedViewController implements ZTodoCompletedViewIF {\n  _todoRepo = new ZTodoRepo();\n\n  _todoView = new ZTodoCompletedView(this);\n\n  constructor() {}\n\n  _viewDidLoaded() {\n    FUNC_LOG();\n\n    this._todoRepo._buildDummyDataCompleted();\n    this._render();\n  }\n\n  private _render() {\n    this._todoView._render(this._todoRepo._todoList);\n  }\n\n  // #region TodoView CallBack\n  _requestDelete(todo: ZTodo): void {\n    console.log(`REQUEST DELETE ${todo._title}`);\n    this._todoRepo._deleteTodo(todo);\n    this._todoView._deleteUIRowForTodo(todo);\n  }\n  _requestRemoveCompleted(todo: ZTodo): void {}\n  // #endregion TodoView CallBack\n}\n","import { Application } from \"application/app\";\nimport \"./styles/index.scss\";\n\n$(document).ready(function () {\n  console.table({\n    \"RUN MODE\": _DEBUG_ ? \"DEBUG MODE\" : \"RELEASE MODE\",\n    \"APP VERSION\": _APP_VERSION_,\n  });\n\n  Application._app._initApp();\n});\n"],"names":["Application","constructor","this","mainView","ZMainViewController","_initApp","FUNC_LOG","_viewDidLoaded","_app","_todoList","_addTodo","title","description","todo","ZTodo","unshift","_buildDummyData","i","push","_buildDummyDataCompleted","_markAsCompleted","_printTodo","index","length","_deleteTodo","idx","indexOf","splice","_id","_generateId","_title","_description","_completed","_createdAt","Date","_updatedAt","val","globalID","toString","_toString","delegate","TAG","_connectionState","ZMidiManagerState","DISCONNECTED","connectionState","startMidi","LOG","navigator","permissions","query","name","state","requestMIDIAccess","then","access","inputs","size","addEventListener","event","_onMidiPortChanged","MIDIConnectionEvent","target","MIDIAccess","port","MIDIInput","midiInput","_midiPortToString","CONNNECTED","onConnectionChanged","startConnectToMidi","midiAccess","manufacturer","tag","message","_todoVC","ZTodoViewController","_todoCompletedVC","ZTodoCompletedViewController","_midi","ZMidiManager","_initUIEvent","midiManager","$","on","_onBtnTest_Clicked","_delegate","_table","_render","todoList","body","children","empty","forEach","rowID","newRow","attr","append","text","btnDelete","_btnDelete_Clicked","btnCompleted","_btnMarkAsCompleted_Clicked","_requestDelete","_requestMarkCompleted","_deleteUIRowForTodo","row","find","remove","_todoRepo","ZTodoRepo","_todoView","ZTodoView","btnRemoveCompleted","ZTodoCompletedView","_requestRemoveCompleted","document","ready"],"sourceRoot":""}